// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../dist/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(uuid()) //@db.Uuid
  userId            String //@db.Uuid
  type              String
  provider          String
  providerAccountId String   @default(cuid())
  refresh_token     String? //@db.Text
  refresh_expire_at Int?
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  voided            Boolean  @default(false)
  id_token          String? //@db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([type, providerAccountId])
}

model User {
  id              String    @id @default(uuid()) //@db.Uuid
  username        String    @unique
  profileUpdated  Boolean   @default(false)
  accountVerified DateTime?
  voided          Boolean   @default(false)
  isAdmin         Boolean   @default(false)
  password        String
  lastLogin       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  person          Person?
  accounts        Account[]
}

// Represent Human
model Person {
  id          String   @id @default(uuid()) //@db.Uuid
  firstName   String?
  lastName    String?
  surname     String?
  userId      String?  @unique //@db.Uuid
  avatarUrl   String?
  phoneNumber String   @unique
  email       String   @unique
  gender      Gender   @default(Unknown)
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  voided      Boolean  @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum Gender {
  Male
  Female
  Unknown
}

model County {
  code     String  @id @unique
  name     String
  capital  String?
  metadata Json?

  voided      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  subCounties SubCounty[]
  wards       Ward[]
  stages      Stage[]

  @@index([code, name])
}

model SubCounty {
  code String @id @unique
  name String

  countyCode String
  county     County @relation(fields: [countyCode], references: [code], onDelete: Cascade)
  metadata   Json?

  voided    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wards     Ward[]
  stages    Stage[]

  @@index([countyCode, name])
}

model Ward {
  code String @id @unique
  name String

  countyCode    String
  county        County    @relation(fields: [countyCode], references: [code], onDelete: Cascade)
  subCountyCode String
  subCounty     SubCounty @relation(fields: [subCountyCode], references: [code], onDelete: Cascade)
  metadata      Json?

  voided    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subCountyCode, name])
}

model Operator {
  id        String   @id @default(uuid())
  name      String // Name of the operator (e.g., "supermetro")
  contact   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fleets    Fleet[]
  voided    Boolean  @default(false)
}

model Fleet {
  id          String       @id @default(uuid())
  name        String       @unique
  vehicleType String // Bus, Matatu, Shuttle, etc.
  capacity    Int
  plateNumber String       @unique
  operatorId  String
  operator    Operator     @relation(fields: [operatorId], references: [id])
  status      String // Active, Inactive, Maintenance
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  voided      Boolean      @default(false)
  trips       Trip[]
  routes      FleetRoute[]
}

model Route {
  id               String         @id @default(uuid())
  name             String // e.g., "CBD - Rongai"
  startPoint       String
  endPoint         String
  distanceKm       Float
  estimatedTimeMin Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  stages           RouteStage[]
  trips            Trip[]
  voided           Boolean        @default(false)
  RoutePricing     RoutePricing[]
  fleets           FleetRoute[]
}

model FleetRoute {
  id        String   @id @default(uuid())
  routeId   String
  route     Route    @relation(fields: [routeId], references: [id])
  fleetId   String
  fleet     Fleet    @relation(fields: [fleetId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  voided    Boolean  @default(false)
}

// Like a physical places, never changes regardles if what
model Stage {
  id            String         @id @default(uuid())
  name          String
  countyCode    String
  subCountyCode String
  latitude      Decimal
  longitude     Decimal
  radius        Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  voided        Boolean        @default(false)
  routes        RouteStage[]
  fromPricings  RoutePricing[] @relation("FromPricing")
  toPricings    RoutePricing[] @relation("ToPricing")
  fromTrips     Trip[]         @relation("FromStage")
  toTrips       Trip[]         @relation("ToStage")
  county        County         @relation(fields: [countyCode], onDelete: Cascade, references: [code])
  subCounty     SubCounty      @relation(fields: [subCountyCode], onDelete: Cascade, references: [code])
}

model RouteStage {
  id      String @id @default(uuid())
  routeId String
  order   Int
  stageId String

  //  fromTickets Ticket[] @relation("FromStage")
  // toTickets   Ticket[] @relation("ToStage")

  stage     Stage    @relation(references: [id], fields: [stageId], onDelete: Cascade)
  route     Route    @relation(fields: [routeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([routeId, stageId]) // TODO Add tenant id when upgraded to multitenant
}

// Inter stage pricing for vehicle pursuing a given route since vehicles might
// charg differently depending on the route despit droping at same stages
model RoutePricing {
  id          String   @id @default(uuid())
  routeId     String
  fromStageId String
  toStageId   String
  price       Decimal
  timeStart   String // Price might varry based on time of day (peak and off-peak hours)
  timeEnd     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  voided      Boolean  @default(false)

  route     Route @relation(fields: [routeId], references: [id])
  fromStage Stage @relation(fields: [fromStageId], references: [id], name: "FromPricing")
  toStage   Stage @relation(fields: [toStageId], references: [id], name: "ToPricing")
}

// 
model Trip {
  id             String    @id @default(uuid())
  fleetId        String
  routeId        String
  currentStageId String // from stage
  toStageId      String
  status         String // Ongoing, Completed, Cancelled
  startedAt      DateTime?
  endedAt        DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  voided         Boolean   @default(false)

  fleet        Fleet @relation(fields: [fleetId], references: [id])
  route        Route @relation(fields: [routeId], references: [id])
  currentStage Stage @relation(fields: [currentStageId], references: [id], name: "FromStage")
  toStage      Stage @relation(fields: [toStageId], references: [id], name: "ToStage")
  // tickets      Ticket[]
}

// TODO Add Reviews,payment

// model Passenger {
//   id                     String   @id @default(uuid())
//   name                   String
//   contact                String   @unique
//   preferredPaymentMethod String // Cash, Mpesa, Card
//   createdAt              DateTime @default(now())
//   updatedAt              DateTime @updatedAt
//   // tickets                Ticket[]
//   voided                 Boolean  @default(false)
// }

// model Ticket {
//   id            String    @id @default(uuid())
//   passengerId   String
//   tripId        String
//   fromStageId   String
//   toStageId     String
//   pricePaid     Float
//   paymentStatus String // Paid, Pending, Failed
//   issuedAt      DateTime  @default(now())
//   voided        Boolean   @default(false)
//   passenger     Passenger @relation(fields: [passengerId], references: [id])
//   trip          Trip      @relation(fields: [tripId], references: [id])
//   fromStage     Stage     @relation(fields: [fromStageId], references: [id], name: "FromStage")
//   toStage       Stage     @relation(fields: [toStageId], references: [id], name: "ToStage")
// }
